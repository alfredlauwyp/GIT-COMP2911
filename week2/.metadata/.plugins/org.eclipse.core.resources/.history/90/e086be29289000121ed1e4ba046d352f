import static org.junit.Assert.*;
import junit.framework.Assert;

import org.junit.Test;


public class MessageQueueTest {

	@Test
	public void testMessageQueue() {
		
		MessageQueue newMessages = new MessageQueue();
		
		Message msg0 = new Message("MSG0");
		Message msg1 = new Message("MSG1");
		Message msg2 = new Message("MSG2");
		
		System.out.println("--Adding 5 messages to message queue--");
		
		newMessages.add(msg0);
		newMessages.add(msg1);
		newMessages.add(msg2);
		
		for (Integer c = 0; c < 3; c++)
		{
			Assert.assertEquals(newMessages.getStr(c),"MSG" + c);
		}
		
		System.out.println("--Remove 2 head elements--");
		newMessages.remove();
		newMessages.remove();
		
		//Assert.assertEquals(newMessages.getStr(2), "MSG" + 2);
		
		System.out.println("--testMessageQueue passed--\n");
		
	}

	@Test
	public void testDelete() {
		
	}

	@Test
	public void testRemove() {

		
	}

	@Test
	public void testAdd() {
		fail("Not yet implemented");
	}

	@Test
	public void testSize() {
		fail("Not yet implemented");
	}

	@Test
	public void testPeek() {
		fail("Not yet implemented");
	}

	@Test
	public void testObject() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetClass() {
		fail("Not yet implemented");
	}

	@Test
	public void testHashCode() {
		fail("Not yet implemented");
	}

	@Test
	public void testEquals() {
		fail("Not yet implemented");
	}

	@Test
	public void testClone() {
		fail("Not yet implemented");
	}

	@Test
	public void testToString() {
		fail("Not yet implemented");
	}

	@Test
	public void testNotify() {
		fail("Not yet implemented");
	}

	@Test
	public void testNotifyAll() {
		fail("Not yet implemented");
	}

	@Test
	public void testWaitLong() {
		fail("Not yet implemented");
	}

	@Test
	public void testWaitLongInt() {
		fail("Not yet implemented");
	}

	@Test
	public void testWait() {
		fail("Not yet implemented");
	}

	@Test
	public void testFinalize() {
		fail("Not yet implemented");
	}

}
