import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Comparator;
import java.util.Queue;
import java.util.Collections;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class BFS {

	public BFS(DirectedStringGraph graph)
	{
		this.graph = graph;
		allNodes = graph.getNodeObjects();
	}
	
	@SuppressWarnings("unchecked")
	public void findPath(Comparator<DSGEdge> comp)
	{
		LinkedList<DSGNode> nodesVisited = new LinkedList<DSGNode>();
		LinkedList<DSGNode> nodesToVisit = new LinkedList<DSGNode>();
		LinkedList<DSGNode> parent = new LinkedList<DSGNode>();
		DSGNode rootNode = allNodes.get(0);
		
		nodesToVisit.add(rootNode);
		nodesVisited.add(rootNode);
		
		while(!nodesToVisit.isEmpty())
		{
			DSGNode current = nodesVisited.remove();
			LinkedList<DSGEdge> toAdd = current.getEdges();
			Collections.sort(toAdd, comp);
			for (DSGEdge e : toAdd) 
			{
				if (!nodesVisited.contains(e.getTo()))
				{
					nodesToVisit.addLast(e.getTo());
					parent.addLast(current);
				}
			}
		}
	}
	
	private DirectedStringGraph graph;
	private Comparator comparator;
	private LinkedList<DSGNode> nodesVisited;
	private LinkedList<DSGNode> nodesParent;
	private LinkedList<DSGNode> allNodes;

}
