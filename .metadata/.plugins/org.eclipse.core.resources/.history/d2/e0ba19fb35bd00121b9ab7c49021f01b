import java.util.LinkedList;
import java.awt.Point;

/**
 * DualPoint interface.
 * 
 * Provides the interface for a "node" that consists of 
 *  two points - a point "from" and a point "to". This 
 *  interfaces allows access to these two pairs of points, 
 *  as well as providing access to the distance between these
 *  two points, and the distance between "to" of one point, to
 *  the "from" of a second point.
 * 
 * @author	Hayden Charles Smith, z3418003
 * 			Last modified: 15th May 2013
 */
public class JobPoint implements DualPoint
{

	/**
	 * Constructs a JobPoint given x/y coordinates for both
	 *  the origin and destination point.
	 * @param fromX x-coordinate of "origin" point
	 * @param fromY y-coordinate of "origin" point
	 * @param toX x-coordinate of "destination" point
	 * @param toY y-coordinate of "destination" point
	 */
	public JobPoint(int fromX, int fromY, int toX, int toY)
	{
		Point from = new Point(fromX, fromY);
		Point to = new Point(toX, toY);
	
		jobs = new LinkedList<Point>();
		jobs.add(INDEX_FROM, from);
		jobs.add(INDEX_TO, to);
		
		// Determine internal distance
		int changeInX = Math.abs(this.getFromX() - this.getToX());
		int changeInY = Math.abs(this.getFromY() - this.getToY());
		this.internalDistance = (changeInX + changeInY);
	}
	
	/**
	 * Return vertical/horizontal distance between "destination" and
	 *  "origin" x and y coordinates of this DualPoint object.
	 *  Please note this means the integer difference in x-coordinates
	 *   and integer difference in y-coordinates is calculated independently
	 *   before being added together to provide the result. 
	 * @return Sum of vertical and horizontal distances between
	 *  "destination" and "origin" x/y coordinates
	 */
	public int getInternalDistance()
	{
		return this.internalDistance;
	}
	
	/**
	 * Return distance between "destination" of one JobPoint, 
	 *  to the "origin" of another JobPoint. Please note this means the
	 *  integer difference in x-coordinates and integer difference
	 *  in y-coordinates is calculated independently before being
	 *  added together to provide the result. 
	 * @param pointTo JobPoint containing "origin" that requires
	 *  finding the distance to from "this" destination
	 * @return Sum of vertical and horizontal distances between "destination"s
	 *  x/y coordinates of this DualPoint, and "origin"s x/y coordinates
	 *  of another DualPoint
	 */
	public int getExternalDistanceTo(DualPoint jobTo)
	{
		int changeInX = Math.abs(jobTo.getFromX() - this.getToX());
		int changeInY = Math.abs(jobTo.getFromY() - this.getToY());
		return (changeInX + changeInY);
	}
	
	/**
	 * Return x value of origin point
	 * @return x-coordinate of "origin" point
	 */
	public int getFromX()
	{
		return (new Double(getPointFrom().getX()).intValue());
	}
	
	/**
	 * Return y value of origin point
	 * @return y-coordinate of "origin" point
	 */
	public int getFromY()
	{
		return (new Double(getPointFrom().getY()).intValue());
	}
	
	/**
	 * Return x value of destination point
	 * @return x-coordinate of "destination" point
	 */
	public int getToX()
	{
		return (new Double(getPointTo().getX()).intValue());
	}
	
	/**
	 * Return y value of destination point
	 * @return y-coordinate of "destination" point
	 */
	public int getToY()
	{
		return (new Double(getPointTo().getY()).intValue());
	}
	
	/**
	 * Return Point object of origin point
	 * @return Point object of "origin" point
	 */
	private Point getPointFrom()
	{
		return jobs.get(INDEX_FROM);
	}
	
	/**
	 * Return Point object of destination point
	 * @return Point object of "destination" point
	 */
	private Point getPointTo()
	{
		return jobs.get(INDEX_TO);
	}
	
	private LinkedList<Point> jobs;
	private int internalDistance;
	private static final int INDEX_FROM = 0;
	private static final int INDEX_TO = 1;
	
}