import java.util.LinkedList;

public class AsearchNode<E> implements SearchNode<E> {

	public AsearchNode(E nodeObj, int distanceTravelled)
	{
		this.nodeObj = nodeObj;
		this.distanceTravelled = distanceTravelled;
		this.connected = false;
	}
	
	public boolean isConnected()
	{
		return this.connected;
	}
	
	public void setConnected(boolean connection)
	{
		this.connected = connection;
	}
	
	public boolean equals(Object nodeObj)
	{
		if (nodeObj == this.nodeObj)
		{
			return true;
		}
		return false;
	}
	
	public E getNodeObj()
	{
		return this.nodeObj;
	}
	
	public void addVisited(AsearchNode<E> newVisited)
	{
		visited.add(newVisited);
	}
	
	public int getNumNodesVisited()
	{
		return visited.size();
	}
	
	public boolean hasVisited(E otherNode)
	{
		if (visited.contains(otherNode))
		{
			return true;
		}
		return false;
	}
	
	public LinkedList<E> getNodesVisited()
	{
		LinkedList<E> path = new LinkedList<E>();
		for (AsearchNode<E> obj : visited)
		{
			path.add(obj.getNodeObj());
		}
		return path;
	}

	private LinkedList<AsearchNode<E>> visited;
	private E nodeObj;
	private E parentObj;
	private boolean connected;
	private int distanceTravelled;
	
}