import java.util.LinkedList;
import java.util.Comparator;
import java.util.Collections;
import java.util.PriorityQueue;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class Asearch {

	public Asearch(DirectedStringGraph graph)
	{
		this.graph = graph;
		allNodes = graph.getNodeObjects();
	}
	
	public String findPath(String nodeStart, String nodeFinish, Comparator<AsearchNode> comp)
	{
		LinkedList<AsearchNode> nodesVisited = new LinkedList<AsearchNode>();
		PriorityQueue<AsearchNode> nodesToVisit = new PriorityQueue<AsearchNode>(100, comp);
		
		if (allNodes.size() > 0)
		{
			// Find starting node and add it to nodeToVisit
			DSGNode rootNode = graph.findNode(nodeStart);
			nodesToVisit.add(new AsearchNode(rootNode.getValue(), 0, rootNode.getStraightLineDistance(), null));
			
			// Get first node from AsearchNode nodes
			AsearchNode current = nodesToVisit.peek();
			
			System.out.println("DEBUG: " + current);
				
			while(!nodesToVisit.isEmpty() && !nodesVisited.contains(graph.findNode(nodeFinish)))
			{
				/*Debug*/printNodes("nodesVisited", nodesVisited);
				current = nodesToVisit.poll();
				nodesVisited.add(current);		

				LinkedList<DSGEdge> toAdd = graph.findNode(current.getValue()).getEdges();									
				//Collections.sort(toAdd, comp);
								
				for (DSGEdge e : toAdd) 
				{
					if (!nodesVisited.contains(e.getTo()) && !nodesToVisit.contains(e.getTo()))
					{
						String nodeName = e.getTo().getValue();
						int straightLineDistance = graph.findNode(nodeName).getStraightLineDistance();
						nodesToVisit.add(new AsearchNode(nodeName, 0, straightLineDistance, current)); // Where current = parent
					}
				}
			}
			
			/* Not concerned yet 
			if (nodesVisited.contains(graph.findNode(nodeFinish)))
			{				
				LinkedList<DSGNode> path = new LinkedList<DSGNode>();
				
				current	= graph.findNode(nodeFinish);
				path.addFirst(current);
				int index = nodesVisited.indexOf(current);
				DSGNode currentParent = parentVisited.get(index);
				while (current != currentParent)
				{
					current = currentParent;
					index = nodesVisited.indexOf(current);
					currentParent = parentVisited.get(index);
					path.addFirst(current);
				}
				
				printNodes("FINAL: ", path);
			}*/
			
			return null;
		}
		else
		{
			return "[X]";
		}
	}
	
	private void printNodes(String preface, LinkedList<AsearchNode> list)
	{
		System.out.print(preface + ": .. ");
		for (DSGNode item : list)
		{
			if (item != null) 
			{
				System.out.print(item.getValue());
				
			}
			else {
				System.out.print("NULL");
			}
			System.out.print("-");
		}
		System.out.println();
	}
	
	private void printQueue(String preface, PriorityQueue<AsearchNode> list)
	{
		System.out.print(preface + ": .. ");
		AsearchNode[] temp = list.toArray();
		for (DSGNode item : temp)
		{
			if (item != null) 
			{
				System.out.print(item.getValue());
				
			}
			else {
				System.out.print("NULL");
			}
			System.out.print("-");
		}
		System.out.println();
	}
	
	private void printEdges1(String preface, LinkedList<DSGEdge> edges)
	{
		System.out.print(preface + ": .. ");
		for (DSGEdge item : edges)
		{
			System.out.print(item.toString());
			System.out.print(" || ");
		}
		System.out.println();
	}
	
	private void printEdges2(String preface, DSGNode node)
	{
		System.out.print(preface + ": .. ");
		String[] edges = this.graph.getEdges(node.getValue());
		for (int c = 0; c < edges.length; c++)
		{
			System.out.print(edges[c]);
			System.out.print(" || ");
		}
		System.out.println();
	}
	
	private DirectedStringGraph graph;
	private static LinkedList<DSGNode> allNodes;

}
