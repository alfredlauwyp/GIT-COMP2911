import java.util.LinkedList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.lang.StringBuffer;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class Asearch {

	public Asearch(Graph graph)
	{
		this.graph = graph;
		allNodes = graph.getNodes();
	}
	
	public String findPath(String nodeStart, String nodeFinish, Comparator<AsearchNode> comp)
	{
		nodesVisited = new LinkedList<AsearchNode>();
		nodesToVisit = new PriorityQueue<AsearchNode>(100, comp);
		
		if (allNodes.size() > 0)
		{
			StandardNode rootNode = graph.findNode(nodeStart);
			nodesToVisit.add(new AsearchNode(rootNode.getValue(), 0, rootNode.getStraightLineDistance(), null));
			
			AsearchNode current = nodesToVisit.peek();
			
			while(!nodesToVisit.isEmpty() && notVisited(nodeFinish))
			{
				current = nodesToVisit.poll();
				nodesVisited.add(current);		

				LinkedList<StandardEdge> toAdd = graph.findNode(current.getValue()).getEdges();									
								
				for (StandardEdge e : toAdd) 
				{
					String nodeName = e.getTo().getValue();
					int cumulativeDistance = e.getWeight() + current.getPreviousPathDistance();
					int straightLineDistance = graph.findNode(nodeName).getStraightLineDistance();
					AsearchNode newNode = new AsearchNode(nodeName, cumulativeDistance, straightLineDistance, current);
					
					if (notVisited(nodeName))
					{
						if (notToVisit(nodeName))
						{
							nodesToVisit.add(newNode);
						}
						else 
						{
							AsearchNode oldNode = findNodeToVisit(nodeName);//
							if (newNode.getTotalDistances() < oldNode.getTotalDistances())
							{
								nodesToVisit.remove(oldNode); // Remove old node
								nodesToVisit.add(newNode);
							}
						}
					}
				}
			}
			
			return printNodes("\n\nFinal Path", nodesVisited);
			
		}
		else
		{
			return "[X]";
		}
	}
	
	
	
	
	
	
	
	
	
	private AsearchNode findNodeToVisit(String name)
	{
		for (AsearchNode item : nodesToVisit)
		{
			if (item.getValue() == name)
			{
				return item;
			}
		}
		return null;
	}
	
	private boolean notVisited(String name)
	{
		for (AsearchNode item : nodesVisited)
		{
			if (item.getValue() == name)
			{
				return false;
			}
		}
		return true;
	}
	
	private boolean notToVisit(String name)
	{
		for (AsearchNode item : nodesToVisit)
		{
			if (item.getValue() == name)
			{
				return false;
			}
		}
		return true;
	}
		
	private DirectedStringGraph graph;
	private static LinkedList<StandardNode> allNodes;
	LinkedList<AsearchNode> nodesVisited;
	PriorityQueue<AsearchNode> nodesToVisit;

}
