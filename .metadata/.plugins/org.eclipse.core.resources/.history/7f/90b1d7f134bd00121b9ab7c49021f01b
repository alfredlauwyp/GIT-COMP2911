import java.util.LinkedList;
import java.awt.Point;

public class JobPoint implements DualPoint
{

	public JobPoint(int fromX, int fromY, int toX, int toY)
	{
		Point from = new Point(fromX, fromY);
		Point to = new Point(toX, toY);
	
		jobs = new LinkedList<Point>();
		jobs.add(INDEX_FROM, from);
		jobs.add(INDEX_TO, to);
		
		// Determine internal distance
		int changeInX = Math.abs(this.getFromX() - this.getToX());
		int changeInY = Math.abs(this.getFromY() - this.getToY());
		this.internalDistance = (changeInX + changeInY);
	}
	
	/**
	 * Return distance between "destination" and "origin"
	 *  x and y coordinates of this DualPoint object
	 * @return Distance between "destination" and "origin" 
	 *  coordinates
	 */
	public int getInternalDistance()
	{
		return this.internalDistance;
	}
	
	/**
	 * Return distance between "destination" of one DualPoint, 
	 *  to the "origin" of another DualPoint
	 * @param pointTo Point containing "origin" that requires
	 *  finding the distance to from "this" destination
	 * @return Distance between "destination" of this DualPoint,
	 *  and "origin" of another DualPoint
	 */
	public int getExternalDistanceTo(DualPoint jobTo)
	{
		int changeInX = Math.abs(jobTo.getFromX() - this.getToX());
		int changeInY = Math.abs(jobTo.getFromY() - this.getToY());
		return (changeInX + changeInY);
	}
	
	/**
	 * Return x value of origin point
	 * @return x-coordinate of "origin" point
	 */
	public int getFromX()
	{
		return (new Double(getPointFrom().getX()).intValue());
	}
	
	/**
	 * Return y value of origin point
	 * @return y-coordinate of "origin" point
	 */
	public int getFromY()
	{
		return (new Double(getPointFrom().getY()).intValue());
	}
	
	/**
	 * Return x value of destination point
	 * @return x-coordinate of "destination" point
	 */
	public int getToX()
	{
		return (new Double(getPointTo().getX()).intValue());
	}
	
	/**
	 * Return y value of destination point
	 * @return y-coordinate of "destination" point
	 */
	public int getToY()
	{
		return (new Double(getPointTo().getY()).intValue());
	}
	
	/**
	 * Return Point object of origin point
	 * @return Point object of "origin" point
	 */
	private Point getPointFrom()
	{
		return jobs.get(INDEX_FROM);
	}
	
	/**
	 * Return Point object of destination point
	 * @return Point object of "destination" point
	 */
	private Point getPointTo()
	{
		return jobs.get(INDEX_TO);
	}
	
	protected LinkedList<Point> jobs;
	protected int internalDistance;
	protected static final int INDEX_FROM = 0;
	protected static final int INDEX_TO = 1;
	
}