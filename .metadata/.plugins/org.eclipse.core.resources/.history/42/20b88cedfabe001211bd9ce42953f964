import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class MinimalEdgeHeuristic<SearchNode> implements Heuristic<SearchNode> {
	
	public MinimalEdgeHeuristic(DirectedGraph<DualPoint> graph)
	{
		this.graph = graph;
		this.totalNodes = graph.getNumNodes();
		Comparator<Integer> comp = new Comparator<Integer>()
		{
			public int compare(Integer a, Integer b)
			{
				return (a - b);
			}
		};
		
		allEdgeWeights = new PriorityQueue<Integer>(INITIAL_QUEUE_CAPACITY, comp);
		
		ArrayList<DualPoint> allNodes = new ArrayList<DualPoint>(graph.getNodes());
		for (DualPoint node : allNodes)
		{
			ArrayList<DualPoint> neighbours = new ArrayList<DualPoint>(graph.getNeighbours(node));
			for (DualPoint neighbour : neighbours)
			{
				if (neighbour.getFromX() != 0 && neighbour.getFromY() != 0)
				{
					allEdgeWeights.add(node.getExternalDistanceTo(neighbour));
				}
			}
		}
		System.out.println(totalNodes);
	}
	
	public int getEstimate(SearchNode<DualPoint> node)
	{
		int maximumMinimumDistance = 0;
		
		PriorityQueue<Integer> queue = new PriorityQueue<Integer>(allEdgeWeights);
				 
		int offset = 12;
		for (int i = 0; i < (this.totalNodes - node.getNumNodesVisited()) + offset; i++)
		{
			if (i >= (offset))
			{
				maximumMinimumDistance += queue.poll();
			}
			else
			{
				queue.poll();
			}
		}
		//return 0;
		return maximumMinimumDistance;
	}
	
	private DirectedGraph<DualPoint> graph;
	private int totalNodes;
	private final int INITIAL_QUEUE_CAPACITY = 100;
	private PriorityQueue<Integer> allEdgeWeights;
}
