import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class MinimalEdgeHeuristic implements Heuristic<SearchNode<DualPoint>> {
	
	public MinimalEdgeHeuristic(DirectedGraph<DualPoint> graph)
	{
		this.graph = graph;
	}
	
	public int getEstimate(SearchNode<DualPoint> node)
	{
		Comparator<Integer> lowToHigh = new Comparator<Integer>()
				{
					public int compare(Integer a, Integer b)
					{
						return (a - b);
					}
				};
				
				allEdgeWeights = new PriorityQueue<Integer>(INITIAL_QUEUE_CAPACITY, lowToHigh);
				
		for (DualPoint dualPoint : this.graph.getNodes())
		{
			if (!node.hasVisitedObj(dualPoint))
			{
				LinkedList<DualPoint> neighbours = new LinkedList<DualPoint>(graph.getNeighbours(dualPoint));
			}
		}
		
	}
	
	private DirectedGraph<DualPoint> graph;
	private final int INITIAL_QUEUE_CAPACITY = 100;
	private PriorityQueue<Integer> allEdgeWeights;
}
