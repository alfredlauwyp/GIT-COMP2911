import java.util.LinkedList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.lang.StringBuffer;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class Asearch {

	public Asearch(Graph graph)
	{
		this.graph = graph;
		allNodes = graph.getNodes();
	}
	
	public String findPath(String nodeStart, String nodeFinish, Comparator<AsearchNode> comp)
	{
		
	}
	
	private AsearchNode findNodeToVisit(String name)
	{
		for (AsearchNode item : nodesToVisit)
		{
			if (item.getValue() == name)
			{
				return item;
			}
		}
		return null;
	}
	
	private boolean notVisited(String name)
	{
		for (AsearchNode item : nodesVisited)
		{
			if (item.getValue() == name)
			{
				return false;
			}
		}
		return true;
	}
	
	private boolean notToVisit(String name)
	{
		for (AsearchNode item : nodesToVisit)
		{
			if (item.getValue() == name)
			{
				return false;
			}
		}
		return true;
	}
		
	private Graph graph;
	private static LinkedList<StandardNode> allNodes;
	LinkedList<AsearchNode> nodesVisited;
	PriorityQueue<AsearchNode> nodesToVisit;

}
