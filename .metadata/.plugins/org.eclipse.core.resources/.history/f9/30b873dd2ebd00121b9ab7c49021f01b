import java.util.ArrayList;

/**
 * AdjacencyList Graph class.
 * 
 * This class implements an adjacency list graph. Graph nodes
 *  and edges are stored as an adjacency list
 *  
 * 
 * @author	Hayden Charles Smith, z3418003
 * 			Last modified: 15th May 2013
 */
public class AdjacencyListGraph<E> implements DirectedGraph<E>
{

	/**
	 * Constructs an AdjacencylistGraph, initializing the
	 *  2D ArrayList that consisting of generic objects E
	 */
	public AdjacencyListGraph()
	{
		nodes = new ArrayList<ArrayList<E>>();	
	}
	
	/**
	 * Adds a node to the adjacency list graph
	 * @param e Object to add
	 */
	public void addNode(E e) {
		ArrayList<E> adjList = new ArrayList<E>();
		adjList.add(e);
		nodes.add(adjList);
	}
	
	/**
	 * Removes a node (and it's edges) from the adjacency
	 *  list graph
	 * @param e Object to remove
	 */
	public void removeNode(E e) {
		for (ArrayList<E> v : nodes)
		{
			if (v.get(0).equals(e))
			{
				nodes.remove(v);
				break;
			}
		}
		for (ArrayList<E> v : nodes)
		{
			for (E item : v)
			{
				if (item.equals(e))
				{
					v.remove(item);
					break;
				}
			}
		}
	}

	/**
	 * Adds an edge between two nodes
	 * @param from Directed edge FROM this point
	 * @param to Directed edge TO this point
	 */
	public void addEdge(E from, E to)
	{
		for (ArrayList<E> v : nodes)
		{
			if (v.get(0).equals(from))
			{
				v.add(to);
			}
		}		
	}

	/**
	 * Determines if two vertices are connected
	 * @param from Node to test connection FROM
	 * @param to Node to test connection TO
	 * @return Whether it is connected
	 */
	public boolean isConnected(E from, E to)
	{
		for (ArrayList<E> v : nodes)
		{
			if (v.get(0).equals(from))
			{
				return v.contains(to);
			}
		}
		return false;
	}

	/**
	 * Removes an edge from a graph
	 * @param from Origin node of edge that is removed
	 * @param to Destination node of edge that is removed
	 */
	public void removeEdge(E from, E to)
	{
		for (ArrayList<E> v : nodes)
		{
			if (v.get(0).equals(from))
			{
				v.remove(to);
			}
		}
	}

	/**
	 * Determines whether a node is in a graph
	 * @param e Object to look for
	 * @return Whether a node is in a graph
	 */
	public boolean isInGraph(E e)
	{
		for (ArrayList<E> vertice : nodes)
		{
			if (vertice.get(0).equals(e))
			{
				return true;
			}
		}
		return false;
	}

	/**
	 * Returns number of nodes in the graph
	 * @return number of nodes in the graph
	 */
	public ArrayList<E> getNeighbours(E e)
	{
		ArrayList<E> neighbours = new ArrayList<E>();
		for (ArrayList<E> v : nodes)
		{
			if (v.get(0).equals(e))
			{
				for (int i = 1; i < v.size(); i++)
				{
					neighbours.add(v.get(i));
				}
			}
		}
		return neighbours;
	}

	/**
	 * Returns number of nodes in the graph
	 * @return number of nodes in the graph
	 */
	public int getNumNodes()
	{
		return nodes.size();
	}
	
	/**
	 * Returns number of edges in the graph
	 * @return number of edges in the graph
	 */
	public int getNumEdges()
	{
		int totalEdges = 0;
		for (ArrayList<E> vertice : nodes)
		{
			totalEdges += vertice.size();
			totalEdges -= 1; // Remove initial item
		}
		return totalEdges;
	}
	
	/**
	 * Creates edges between every node in the graph
	 */
	public void connectAllNodes()
	{
		for (ArrayList<E> i : nodes)
		{
			for (ArrayList<E> j : nodes)
			{
				if (!getNode(i).equals(getNode(j)))
				{
					if (!isConnected(getNode(i), getNode(j)))
					{
						this.addEdge(getNode(i), getNode(j));
					}
				}
			}
		}
	}
	
	private E getNode(ArrayList<E> nodeItems)
	{
		return nodeItems.get(NODE_INDEX);
	}
	
	private ArrayList<ArrayList<E>> nodes;
	private static final int NODE_INDEX = 0;
}
