import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class MinimalEdgeHeuristic implements Heuristic<AsearchNode> {
	
	public MinimalEdgeHeuristic(DirectedGraph<DualPoint> graph)
	{
		Comparator<Integer> comp = new Comparator<Integer>()
		{
			public int compare(Integer a, Integer b)
			{
				return (a - b);
			}
		};
		
		allEdgeWeights = new PriorityQueue<Integer>(INITIAL_QUEUE_CAPACITY, comp);
		
		ArrayList<DualPoint> allNodes = new ArrayList<DualPoint>(graph.getNodes());
		for (DualPoint node : allNodes)
		{
			ArrayList<DualPoint> neighbours = new ArrayList<DualPoint>(graph.getNeighbours(node));
			for (DualPoint neighbour : neighbours)
			{
				allEdgeWeights.add(node.getExternalDistanceTo(neighbour));
			}
		}
	}
	
	public int getEstimate(AsearchNode node)
	{
		int maxToCount = node.getNumNodesVisited();
		int maximumMinimumDistance = 0;
		
		PriorityQueue<Integer> queue = new PriorityQueue<Integer>(allEdgeWeights);
				 
		for (int i = 0; i < (maxToCount - 1); i++)
		{
			//maximumMinimumDistance += queue.poll();
		}
		//System.out.println(maximumMinimumDistance);
		return maximumMinimumDistance;
	}
	
	private final int INITIAL_QUEUE_CAPACITY = 100;
	private PriorityQueue<Integer> allEdgeWeights;
}
