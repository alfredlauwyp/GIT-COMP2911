import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class MinimalEdgeHeuristic implements Heuristic<SearchNode<DualPoint>> {
	
	public MinimalEdgeHeuristic(DirectedGraph<DualPoint> graph)
	{
		this.graph = graph;
	}
	
	public int getEstimate(SearchNode<DualPoint> node)
	{
		int sum = 0;
		
		Comparator<Integer> lowToHigh = new Comparator<Integer>()
		{
			public int compare(Integer a, Integer b)
			{
				return (a - b);
			}
		};
		
		Comparator<Integer> highToLow = new Comparator<Integer>()
		{
			public int compare(Integer a, Integer b)
			{
				return (b - a);
			}
		};
				
		PriorityQueue<Integer> edgeWeights = new PriorityQueue<Integer>(INITIAL_QUEUE_CAPACITY, highToLow);
				
		System.out.println("---------------------------------------------------------------");
		System.out.println(node + " --> " + node.getNodesVisited());
		for (DualPoint dualPoint : this.graph.getNodes())
		{
			System.out.println("\nNode ("+dualPoint+")");
			if (!node.hasVisitedObj(dualPoint))
			{
				System.out.println("--NotVisited");
				ArrayList<DualPoint> neighbours = new ArrayList<DualPoint>(graph.getNeighbours(dualPoint));
				System.out.println("----Neighbours: " + neighbours);
				PriorityQueue<Integer> neighbourEdgeWeights = new PriorityQueue<Integer>(INITIAL_QUEUE_CAPACITY, lowToHigh);
				for (DualPoint neighbour : neighbours)
				{
					if (!node.hasVisitedObj(neighbour) && node.getNodeObj() != neighbour)
					{
						System.out.println("------NotVisited: " + neighbour);
						System.out.println("------Adding: ("+dualPoint.getToX()+", "+dualPoint.getToY()+") --> ("+neighbour.getFromX()+", "+neighbour.getFromY()+") " + dualPoint.getExternalDistanceTo(neighbour));
						
						neighbourEdgeWeights.add(dualPoint.getExternalDistanceTo(neighbour));
					}
				}
				if (neighbourEdgeWeights.size() > 0)
				{
					int o = neighbourEdgeWeights.poll();
					System.out.println("--TakingSmallest " + o);
					edgeWeights.add(o);
				}
			}
		}
		edgeWeights.poll();
		
		PriorityQueue<Integer> edgeWeights2 = new PriorityQueue<Integer>(edgeWeights);
		
		System.out.println("Edge Size: " + edgeWeights2.size());
		for (int i = 0; i < edgeWeights2.size(); i++)
		{
			int oo = edgeWeights2.poll();
			System.out.println("Edge: " + oo);
		}
		for (Integer val : edgeWeights)
		{
			sum += val;
		}
		debug("Estimate: " + sum + "\n");
		return 0;//sum;
		
		
		
	}
	
	private void debug(String str)
	{
		System.out.println(str);
	}
	
	private DirectedGraph<DualPoint> graph;
	private final int INITIAL_QUEUE_CAPACITY = 100;
}
