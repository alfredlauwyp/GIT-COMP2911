import java.util.LinkedList;
import java.util.Comparator;
import java.util.Collections;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class BFS {

	public BFS(DirectedStringGraph graph)
	{
		allNodes = graph.getNodeObjects();
	}
	
	public void findPath(String nodeStart, String nodeFinish, Comparator<DSGEdge> comp)
	{
		LinkedList<DSGNode> nodesVisited = new LinkedList<DSGNode>();
		LinkedList<DSGNode> nodesToVisit = new LinkedList<DSGNode>();
		LinkedList<DSGNode> parent = new LinkedList<DSGNode>();
		DSGNode rootNode = allNodes.get(0);
		
		nodesToVisit.add(rootNode);
		nodesVisited.add(rootNode);
		
		if (nodesVisited.size() == 1)
		{
			parent.add(null);
		}
		else
		{
			parent.addFirst(nodesVisited.get(1));
		}
		while(!nodesToVisit.isEmpty() || inList(nodesVisited, nodeFinish))
		{
			DSGNode current = nodesVisited.remove();
			LinkedList<DSGEdge> toAdd = current.getEdges();
			Collections.sort(toAdd, comp);
			for (DSGEdge e : toAdd) 
			{
				if (!nodesVisited.contains(e.getTo()))
				{
					nodesToVisit.addLast(e.getTo());
					parent.addLast(current);
				}
			}
		}
		
	}
	
	private boolean inList(LinkedList<DSGNode> nodesVisited, String nodeFinish)
	{
		for (DSGNode n : nodesVisited)
		{
			if (nodeFinish == n.)
		}
		return false;
	}
	
	private static LinkedList<DSGNode> allNodes;

}
