import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.util.ArrayList;

public class CourierDelivery
{
	/**
	 * Main function for RoomBookingSystem
	 * @param args data passed in from standard input
	 */
	public static void main(String[] args)
	{
		try
	    {
			Scanner userInput = new Scanner(new FileReader(args[0]));
			graph = new AdjListGraph<JobPoint>();
			
			while (userInput.hasNextLine())
			{
				String input[] = userInput.nextLine().split(" ");
				int fromX = Integer.parseInt(input[COODINATE_FROM_X]);
				int fromY = Integer.parseInt(input[COODINATE_FROM_Y]);
				int toX = Integer.parseInt(input[COODINATE_TO_X]);
				int toY = Integer.parseInt(input[COODINATE_TO_Y]);
				graph.addNode(new JobPoint(fromX, fromY, toX, toY));
			}
			userInput.close();
			graph.connectAllNodes();
			
			printGraph();
			//speak(graph.toString());
					
			/*public int getInternalDistance();
			public int getExternalDistanceTo(DualPoint pointTo);
			public int getFromX();
			public int getFromY();
			public int getToX();
			public int getToY();
			public String toString();	
		
			public void addNode(E e);
			public void removeNode(E e);
			public void addEdge(E from, E to);
			public boolean isConnected(E from, E to);
			public void removeEdge(E from, E to);
			public boolean isInGraph(E e);
			public ArrayList<ArrayList<E>> getNodes();
			ArrayList<E> getNeighbours(E e);
			int getNumVertices();
			int getNumEdges();*/
			
			
			/*Comparator<AsearchNode> comparator = new Comparator<AsearchNode>() {
			    public int compare(AsearchNode e1, AsearchNode e2) { 
			    	if (e1.getTotalDistances() > e2.getTotalDistances()) return 1;
			    	if (e1.getTotalDistances() < e2.getTotalDistances()) return -1;
			    	else return 0;
			    }
			};*/
			//Asearch asearch = new Asearch(graph);
			//String path = asearch.findPath("Arad", "Bucharest", comparator);
			
			
	    }
	    catch (FileNotFoundException e)
	    {
	    	System.err.println("FileNotFoundException: " + e.getMessage());
	    }
		catch (ArrayIndexOutOfBoundsException e)
		{
			System.err.println("Please add a single parameter that is an input file");
		}
		
	}
	
	private static void speakln(String printout)
	{
		speak(printout + "\n");
	}
	
	private static void speak(String printout)
	{
		if (!printout.equals(""))
		{
			System.out.print(printout);
		}
	}
	
	private static void printGraph()
	{
		ArrayList<ArrayList<JobPoint>> nodes = graph.getNodes();
		int maxX = 0;
		int maxY = 0;
		for (int i = 0; i < nodes.size(); i++)
		{
			if (maxX < nodes.get(i).get(0).getFromX())
			{
				maxX = nodes.get(i).get(0).getFromX();
			}
			if (maxX < nodes.get(i).get(0).getToX())
			{
				maxX = nodes.get(i).get(0).getToX();
			}
			if (maxY < nodes.get(i).get(0).getFromY())
			{
				maxY = nodes.get(i).get(0).getFromY();
			}
			if (maxY < nodes.get(i).get(0).getToY())
			{
				maxY = nodes.get(i).get(0).getToY();
			}
		}
		
		ArrayList<ArrayList<String>> data = new ArrayList<ArrayList<String>>();
		
		for (int i = 0; i < maxY; i++)
		{
			ArrayList<String> temp = new ArrayList<String>();
			data.add(i, temp);
			for (int j = 0; j < maxX; j++)
			{
				String temp2 = new String(" ** ");
				data.get(i).add(j, temp2);	
			}
		}
		
		for (int i = 0; i < maxY; i++)
		{
			for (int j = 0; j < maxX; j++)
			{
				String val = data.get(i).get(j);
				for (int k = 0; k < nodes.size(); k++)
				{
					
				}
			}
		}
		
		for (int i = 0; i < maxY; i++)
		{
			for (int j = 0; j < maxX; j++)
			{
				speak(data.get(i).get(j));
			}
			speak("\n\n");
		}
	}
	
	static AdjListGraph<JobPoint> graph = new AdjListGraph<JobPoint>();
	private static final int COODINATE_FROM_X = 1;
	private static final int COODINATE_FROM_Y = 2;
	private static final int COODINATE_TO_X = 4;
	private static final int COODINATE_TO_Y = 5;

}


