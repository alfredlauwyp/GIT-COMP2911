                                                                     
                                                                     
                                                                     
                                             
import java.util.LinkedList;
import java.util.Comparator;
import java.util.Collections;
import java.lang.StringBuffer;

/**
 * Implements Breadth First Search Algorithm
 * @author Hayden Smith
 *
 */
public class BFS {

	public BFS(DirectedStringGraph graph)
	{
		this.graph = graph;
		allNodes = graph.getNodeObjects();
	}
	
	public String findPath(String nodeStart, String nodeFinish, Comparator<DSGEdge> comp)
	{
		System.out.println("==================================================================STEVEN <3 ===============================================================");
		LinkedList<DSGNode> nodesVisited = new LinkedList<DSGNode>();
		LinkedList<DSGNode> nodesToVisit = new LinkedList<DSGNode>();
		LinkedList<DSGNode> parent = new LinkedList<DSGNode>();
		LinkedList<DSGNode> parentVisited = new LinkedList<DSGNode>();
		if (allNodes.size() > 0)
		{
			DSGNode rootNode = allNodes.get(0);
			nodesToVisit.add(rootNode);
			parent.add(rootNode);
			
			DSGNode current = rootNode;
			DSGNode parentTemp = current;
			
			printNodes("AllNodes", allNodes);
			printEdges2("Edges (root node)", rootNode);
						
			while(!nodesToVisit.isEmpty() && !nodesVisited.contains(graph.findNode(nodeFinish)))
			{

																					System.out.println("\n");
																		
																					System.out.println("=== Part 1 === START");
																					printNodes("nodesVisited", nodesVisited);
																					printNodes("nodesToVisit", nodesToVisit);
																					printNodes("parent", parent);
																					printNodes("parentVisited", parentVisited);
				current = nodesToVisit.remove();
				nodesVisited.add(current);
				
				parentTemp = parent.remove();
				parentVisited.add(parentTemp);
				
																					System.out.println("\n=== Part 2 === ADDED TO PARENT VISITED / NODE VISITED");
																					printNodes("nodesVisited", nodesVisited);
																					printNodes("nodesToVisit", nodesToVisit);
																					printNodes("parent", parent);
																					printNodes("parentVisited", parentVisited);
				LinkedList<DSGEdge> toAdd = current.getEdges();
																					
																		
																					System.out.println("\n=== Part 3 === PRINTING CURRENT EDGES");
																					printEdges1("Edges...", toAdd);
				Collections.sort(toAdd, comp);
				
																					System.out.println("\n=== Part 4 === SORTED");
																					printEdges1("Edges...", toAdd);
																					
				for (DSGEdge e : toAdd) 
				{
					if (!nodesVisited.contains(e.getTo()))
					{
						nodesToVisit.addLast(e.getTo());
						parent.addLast(current);
					}
				}
																					System.out.println("\n=== Part 5 === ALL THE OTHER SHIT");
																					printNodes("nodesVisited-", nodesVisited);
																					printNodes("parentVisited", parentVisited);
																					printNodes("nodesToVisit", nodesToVisit);
																					printNodes("parent", parent);
																					
				
				
				System.out.println("\n\n");
			}
			
			System.out.println("Found it...");
			printNodes("nodesVisited", nodesVisited);
			
			
			if (nodesVisited.contains(graph.findNode(nodeFinish)))
			{
				StringBuffer result = new StringBuffer();
				
				LinkedList<DSGNode> path = new LinkedList<DSGNode>();
				
				current	= graph.findNode(nodeFinish);
				path.addFirst(current);
				int index = nodesVisited.indexOf(current);
				DSGNode currentParent = parentVisited.get(index);
				while (current != currentParent)
				{
					current = currentParent;
					index = nodesVisited.indexOf(current);
					currentParent = parentVisited.get(index);
					path.addFirst(current);
				}
				
				printNodes("FINAL: ", path);

				System.out.println("RESULT: " + result.toString());
			}
			
			return null;
		}
		else
		{
			return "[X]";
		}
	}
	
	private void printNodes(String preface, LinkedList<DSGNode> list)
	{
		System.out.print(preface + ": .. ");
		for (DSGNode item : list)
		{
			if (item != null) 
			{
				System.out.print(item.getValue());
				
			}
			else {
				System.out.print("NULL");
			}
			System.out.print("-");
		}
		System.out.println();
	}
	
	private void printEdges1(String preface, LinkedList<DSGEdge> edges)
	{
		System.out.print(preface + ": .. ");
		for (DSGEdge item : edges)
		{
			System.out.print(item.toString());
			System.out.print(" || ");
		}
		System.out.println();
	}
	
	private void printEdges2(String preface, DSGNode node)
	{
		System.out.print(preface + ": .. ");
		String[] edges = this.graph.getEdges(node.getValue());
		for (int c = 0; c < edges.length; c++)
		{
			System.out.print(edges[c]);
			System.out.print(" || ");
		}
		System.out.println();
	}
	
	private DirectedStringGraph graph;
	private static LinkedList<DSGNode> allNodes;

}
